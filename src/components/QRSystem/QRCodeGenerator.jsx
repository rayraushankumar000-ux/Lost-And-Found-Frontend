import React, { useState, useRef } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import { useNotification } from '../../contexts/NotificationContext';
import './QRCodeGenerator.css';

const QRCodeGenerator = () => {
  const [qrType, setQrType] = useState('item');
  const [qrData, setQrData] = useState('');
  const [generatedQR, setGeneratedQR] = useState('');
  const [qrSize, setQrSize] = useState(200);
  const [isGenerating, setIsGenerating] = useState(false);
  const qrCanvasRef = useRef(null);
  const { user } = useAuth();
  const { addNotification } = useNotification();

  const qrTypes = [
    { value: 'item', label: 'Item QR Code', icon: 'üì¶', description: 'Generate QR for specific lost/found item' },
    { value: 'user', label: 'User Profile', icon: 'üë§', description: 'QR code linking to your profile' },
    { value: 'location', label: 'Location', icon: 'üìç', description: 'QR for specific lost & found location' },
    { value: 'business', label: 'Business', icon: 'üè¢', description: 'For businesses to manage multiple items' }
  ];

  const generateQRCode = async () => {
    if (!qrData.trim()) {
      addNotification({
        title: 'Error',
        message: 'Please enter data for the QR code',
        type: 'error'
      });
      return;
    }

    setIsGenerating(true);

    // Simulate QR generation (in real app, use a QR library like qrcode)
    setTimeout(() => {
      const canvas = qrCanvasRef.current;
      if (canvas) {
        const ctx = canvas.getContext('2d');
        
        // Clear canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // Draw simple QR pattern (simplified)
        ctx.fillStyle = '#000000';
        const cellSize = qrSize / 21; // 21x21 QR grid
        
        // Draw QR pattern
        for (let i = 0; i < 21; i++) {
          for (let j = 0; j < 21; j++) {
            if ((i + j) % 3 === 0 || (i * j) % 7 === 0) {
              ctx.fillRect(j * cellSize, i * cellSize, cellSize, cellSize);
            }
          }
        }
        
        // Add logo in center
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(8 * cellSize, 8 * cellSize, 5 * cellSize, 5 * cellSize);
        ctx.fillStyle = '#000000';
        ctx.fillRect(9 * cellSize, 9 * cellSize, 3 * cellSize, 3 * cellSize);
        
        setGeneratedQR(canvas.toDataURL());
      }
      
      setIsGenerating(false);
      addNotification({
        title: 'QR Code Generated',
        message: 'Your QR code has been created successfully'
      });
    }, 1500);
  };

  const downloadQR = () => {
    if (!generatedQR) return;
    
    const link = document.createElement('a');
    link.download = `qr-code-${qrType}-${Date.now()}.png`;
    link.href = generatedQR;
    link.click();
  };

  const printQR = () => {
    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
      <html>
        <head>
          <title>Print QR Code</title>
          <style>
            body { 
              font-family: Arial, sans-serif; 
              text-align: center; 
              padding: 40px;
            }
            .qr-container { 
              margin: 20px auto; 
              max-width: 300px;
            }
            .qr-info {
              margin-top: 20px;
              font-size: 14px;
              color: #666;
            }
          </style>
        </head>
        <body>
          <h2>Lost & Found QR Code</h2>
          <div class="qr-container">
            <img src="${generatedQR}" alt="QR Code" style="width: 100%;" />
          </div>
          <div class="qr-info">
            <p><strong>Type:</strong> ${qrTypes.find(t => t.value === qrType)?.label}</p>
            <p><strong>Generated:</strong> ${new Date().toLocaleDateString()}</p>
            <p>Scan this QR code to access lost & found information</p>
          </div>
        </body>
      </html>
    `);
    printWindow.document.close();
    printWindow.print();
  };

  const getPlaceholderText = () => {
    switch (qrType) {
      case 'item':
        return 'Enter item description or use auto-generate...';
      case 'user':
        return `Profile: ${user?.name}`;
      case 'location':
        return 'Enter location name and address...';
      case 'business':
        return 'Enter business name and contact info...';
      default:
        return 'Enter data for QR code...';
    }
  };

  const autoGenerateData = () => {
    const autoData = {
      item: `Lost Item - ${user?.name}\nCategory: Electronics\nDate: ${new Date().toLocaleDateString()}\nContact: ${user?.email}`,
      user: `User Profile: ${user?.name}\nEmail: ${user?.email}\nVerified: ${user?.verified ? 'Yes' : 'No'}`,
      location: `Lost & Found Location\nCentral Park Visitors Center\nOpen: 9AM-5PM\nPhone: (555) 123-4567`,
      business: `Business: City Mall Lost & Found\nManager: John Smith\nHours: 10AM-8PM\nEmail: lostfound@citymall.com`
    };
    
    setQrData(autoData[qrType]);
  };

  return (
    <div className="qr-generator">
      <div className="qr-header">
        <h2>üé´ QR Code Generator</h2>
        <p>Create QR codes for items, profiles, and locations</p>
      </div>

      <div className="qr-configuration">
        {/* QR Type Selection */}
        <div className="config-section">
          <h4>QR Code Type</h4>
          <div className="type-grid">
            {qrTypes.map(type => (
              <div
                key={type.value}
                className={`type-card ${qrType === type.value ? 'active' : ''}`}
                onClick={() => setQrType(type.value)}
              >
                <div className="type-icon">{type.icon}</div>
                <div className="type-info">
                  <div className="type-label">{type.label}</div>
                  <div className="type-description">{type.description}</div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Data Input */}
        <div className="config-section">
          <div className="section-header">
            <h4>QR Code Data</h4>
            <button 
              className="btn btn-outline btn-small"
              onClick={autoGenerateData}
            >
              Auto-generate
            </button>
          </div>
          <textarea
            value={qrData}
            onChange={(e) => setQrData(e.target.value)}
            placeholder={getPlaceholderText()}
            className="qr-data-input"
            rows="4"
          />
        </div>

        {/* Size Configuration */}
        <div className="config-section">
          <h4>QR Code Size</h4>
          <div className="size-controls">
            <input
              type="range"
              min="100"
              max="400"
              value={qrSize}
              onChange={(e) => setQrSize(parseInt(e.target.value))}
              className="size-slider"
            />
            <span className="size-value">{qrSize}px</span>
          </div>
          <div className="size-presets">
            <button 
              className={`size-preset ${qrSize === 150 ? 'active' : ''}`}
              onClick={() => setQrSize(150)}
            >
              Small
            </button>
            <button 
              className={`size-preset ${qrSize === 200 ? 'active' : ''}`}
              onClick={() => setQrSize(200)}
            >
              Medium
            </button>
            <button 
              className={`size-preset ${qrSize === 300 ? 'active' : ''}`}
              onClick={() => setQrSize(300)}
            >
              Large
            </button>
          </div>
        </div>

        {/* Generate Button */}
        <button
          className="btn btn-primary generate-btn"
          onClick={generateQRCode}
          disabled={isGenerating || !qrData.trim()}
        >
          {isGenerating ? (
            <>
              <div className="spinner-small"></div>
              Generating QR Code...
            </>
          ) : (
            'Generate QR Code'
          )}
        </button>
      </div>

      {/* QR Code Preview */}
      {generatedQR && (
        <div className="qr-preview">
          <h4>QR Code Preview</h4>
          <div className="preview-container">
            <div className="qr-display">
              <canvas
                ref={qrCanvasRef}
                width={qrSize}
                height={qrSize}
                style={{ display: 'none' }}
              />
              <img src={generatedQR} alt="Generated QR Code" className="qr-image" />
              
              {/* Usage Instructions */}
              <div className="qr-usage">
                <h5>How to Use:</h5>
                <ul>
                  <li>üì± <strong>Print</strong> and attach to items</li>
                  <li>üè¢ <strong>Display</strong> at lost & found locations</li>
                  <li>ü§ù <strong>Share</strong> with finders/owners</li>
                  <li>üìß <strong>Include</strong> in emails and messages</li>
                </ul>
              </div>
            </div>
            
            {/* Action Buttons */}
            <div className="qr-actions">
              <button className="btn btn-outline" onClick={downloadQR}>
                üì• Download PNG
              </button>
              <button className="btn btn-outline" onClick={printQR}>
                üñ®Ô∏è Print
              </button>
              <button className="btn btn-primary">
                üìß Share via Email
              </button>
            </div>
          </div>
        </div>
      )}

      {/* QR Code Templates */}
      <div className="qr-templates">
        <h4>üöÄ Quick Templates</h4>
        <div className="template-grid">
          <div className="template-card" onClick={() => {
            setQrType('item');
            setQrData('If found, please scan and contact owner\nItem: Valuable Personal Item\nContact: support@lostfound.com');
          }}>
            <div className="template-icon">üì¶</div>
            <div className="template-name">Generic Item Tag</div>
          </div>
          
          <div className="template-card" onClick={() => {
            setQrType('location');
            setQrData('Official Lost & Found Drop-off\nLocation: Community Center\nHours: Mon-Fri 9AM-5PM\nPlease scan for item reporting');
          }}>
            <div className="template-icon">üìç</div>
            <div className="template-name">Drop-off Location</div>
          </div>
          
          <div className="template-card" onClick={() => {
            setQrType('business');
            setQrData('Business Lost & Found\nManaged by Professional Staff\nContact for item pickup\nHours: Business Hours');
          }}>
            <div className="template-icon">üè¢</div>
            <div className="template-name">Business Template</div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default QRCodeGenerator;